"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var express_1 = require("express");
var decorators_1 = require("./decorators");
var Server = (function () {
    function Server(showLogs) {
        this._showLogs = false;
        this.LOG_STR = 'Setting up controller ';
        this._app = express();
        this._showLogs = showLogs || false;
    }
    Object.defineProperty(Server.prototype, "app", {
        get: function () {
            return this._app;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "showLogs", {
        get: function () {
            return this._showLogs;
        },
        set: function (showLogs) {
            this._showLogs = showLogs;
        },
        enumerable: true,
        configurable: true
    });
    Server.prototype.addControllers = function (controllers, routerLib) {
        var _this = this;
        controllers = (controllers instanceof Array) ? controllers : [controllers];
        var routerLibrary = routerLib || express_1.Router;
        controllers.forEach(function (controller) {
            if (controller) {
                var _a = _this.getRouter(routerLibrary, controller), basePath = _a.basePath, router = _a.router;
                if (basePath && router) {
                    _this.app.use(basePath, router);
                }
            }
        });
    };
    Server.prototype.wrapErrorMiddleware = function (errorMiddleware, requestHandler) {
        var wrapped = function (req, res, next) {
            try {
                requestHandler(req, res, next);
            }
            catch (error) {
                errorMiddleware(error, req, res, next);
            }
        };
        return wrapped;
    };
    Server.prototype.getRouter = function (routerLibrary, controller) {
        var _this = this;
        var prototype = Object.getPrototypeOf(controller);
        var options = Reflect.getOwnMetadata(decorators_1.ClassKeys.Options, prototype);
        var router;
        if (options) {
            router = routerLibrary(options);
        }
        else {
            router = routerLibrary();
        }
        var basePath = Reflect.getOwnMetadata(decorators_1.ClassKeys.BasePath, prototype);
        if (!basePath) {
            return {
                basePath: null,
                router: null,
            };
        }
        if (this.showLogs) {
            console.log(this.LOG_STR + controller.constructor.name);
        }
        var classMiddleware = Reflect.getOwnMetadata(decorators_1.ClassKeys.Middleware, prototype);
        if (classMiddleware) {
            router.use(classMiddleware);
        }
        var classWrapper = Reflect.getOwnMetadata(decorators_1.ClassKeys.Wrapper, prototype);
        var members = Object.getOwnPropertyNames(controller);
        members = members.concat(Object.getOwnPropertyNames(prototype));
        members.forEach(function (member) {
            var route = controller[member];
            var routeProperties = Reflect.getOwnMetadata(member, prototype);
            if (route && routeProperties) {
                var routeMiddleware = routeProperties.routeMiddleware, routeErrorMiddleware = routeProperties.routeErrorMiddleware, httpVerb = routeProperties.httpVerb, path = routeProperties.path, routeWrapper = routeProperties.routeWrapper;
                var callBack = function (req, res, next) {
                    return controller[member](req, res, next);
                };
                if (classWrapper) {
                    callBack = classWrapper(callBack);
                }
                if (routeWrapper) {
                    callBack = routeWrapper(callBack);
                }
                if (routeErrorMiddleware) {
                    callBack = _this.wrapErrorMiddleware(routeErrorMiddleware, callBack);
                }
                if (routeMiddleware) {
                    router[httpVerb](path, routeMiddleware, callBack);
                }
                else {
                    router[httpVerb](path, callBack);
                }
            }
        });
        var children = Reflect.getOwnMetadata(decorators_1.ClassKeys.Children, prototype);
        if (children) {
            children = (children instanceof Array) ? children : [children];
            children.forEach(function (child) {
                var childRouterAndPath = _this.getRouter(routerLibrary, child);
                if (childRouterAndPath.router) {
                    router.use(childRouterAndPath.basePath, childRouterAndPath.router);
                }
            });
        }
        var classErrorMiddleware = Reflect.getOwnMetadata(decorators_1.ClassKeys.ErrorMiddleware, prototype);
        if (classErrorMiddleware) {
            router.use(classErrorMiddleware);
        }
        return {
            basePath: basePath,
            router: router,
        };
    };
    return Server;
}());
exports.Server = Server;
//# sourceMappingURL=Server.js.map