import { RequestHandler, ErrorRequestHandler, RouterOptions } from 'express';
import 'reflect-metadata';
declare type Middleware = RequestHandler;
declare type ErrorMiddleware = ErrorRequestHandler;
declare type WrapperFunction = ((action: any) => any);
declare type Controller = InstanceType<any>;
export declare function Checkout(path?: string | RegExp): MethodDecorator;
export declare function Copy(path?: string | RegExp): MethodDecorator;
export declare function Delete(path?: string | RegExp): MethodDecorator;
export declare function Get(path?: string | RegExp): MethodDecorator;
export declare function Head(path?: string | RegExp): MethodDecorator;
export declare function Lock(path?: string | RegExp): MethodDecorator;
export declare function Merge(path?: string | RegExp): MethodDecorator;
export declare function Mkactivity(path?: string | RegExp): MethodDecorator;
export declare function Mkcol(path?: string | RegExp): MethodDecorator;
export declare function Move(path?: string | RegExp): MethodDecorator;
export declare function MSearch(path?: string | RegExp): MethodDecorator;
export declare function Notify(path?: string | RegExp): MethodDecorator;
export declare function Options(path?: string | RegExp): MethodDecorator;
export declare function Patch(path?: string | RegExp): MethodDecorator;
export declare function Post(path?: string | RegExp): MethodDecorator;
export declare function Purge(path?: string | RegExp): MethodDecorator;
export declare function Put(path?: string | RegExp): MethodDecorator;
export declare function Report(path?: string | RegExp): MethodDecorator;
export declare function Search(path?: string | RegExp): MethodDecorator;
export declare function Subscribe(path?: string | RegExp): MethodDecorator;
export declare function Trace(path?: string | RegExp): MethodDecorator;
export declare function Unlock(path?: string | RegExp): MethodDecorator;
export declare function Unsubscribe(path?: string | RegExp): MethodDecorator;
export declare enum ClassKeys {
    BasePath = "BASE_PATH",
    Middleware = "MIDDLEWARE",
    ErrorMiddleware = "ERROR_MIDDLEWARE",
    Wrapper = "WRAPPER",
    Children = "CHILDREN",
    Options = "OPTIONS"
}
export declare function Controller(path: string): ClassDecorator;
export declare function ClassMiddleware(middleware: Middleware | Middleware[]): ClassDecorator;
export declare function ClassErrorMiddleware(middleware: ErrorMiddleware | ErrorMiddleware[]): ClassDecorator;
export declare function ClassWrapper(wrapperFunction: WrapperFunction): ClassDecorator;
export declare function ClassOptions(options: RouterOptions): ClassDecorator;
export declare function Children(controllers: Controller | Controller[]): ClassDecorator;
export declare function ChildControllers(controllers: Controller | Controller[]): ClassDecorator;
export declare function Middleware(middleware: Middleware | Middleware[]): MethodDecorator;
export declare function ErrorMiddleware(middleware: ErrorMiddleware): MethodDecorator;
export declare function Wrapper(wrapperFunction: WrapperFunction): (target: any, propertyKey: string | symbol, descriptor?: PropertyDescriptor | undefined) => PropertyDescriptor | undefined;
export {};
